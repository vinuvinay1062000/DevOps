   Notes
     
    pwd = present working directoy          
    cd  =change directory
    os = operating system
    ide =integrated development environment (IDE)
    
    
    Popular instructions for dockerfile
      
      FROM â€“ This instruction defines the parent image for subsequent instructions. 

 ***for more details go through this link 
 https://www.howtoforge.com/tutorial/how-to-create-docker-images-with-dockerfile-18-04/
   
   
   How to create a image
   
FROM is the starting point of image and it defines the base image 

    
   DATABASE 
   
   docker pull postgres
docker images 
docker container create \
--name vinay \   (container name)
-p 5433:5432 \ (port number)
-h vinay \  (set the host name for container
-e POSTGRES_PASSWORD=vinuvinay13199 \  (to pass the environment variable)
postgres
docker ps -a  (to check)
docker container start vinay 
docker ps  (to check the container is running or not)
docker container logs vinay
   
   ngnix is very fast 
   
  ===============================================
  
               NGINX reverese proxy
               
 * docker run -d --name nginx-base -p 80:80 nginx:latest 
 *docker cp nginx-base:/etc/nginx/conf.d/default.conf ~/Desktop/default.conf
 	 sudo nano default.conf
  sudo docker cp ~/Desktop
   sudo docker cp ~/Desktop/default.conf nginx-base:/etc/nginx/conf.d/
   
   
   
   
   ======================================================
   
                    NGINX
   
   https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04
   
   
   rewrite  ^(.*)$ https://v2.blu-aie.ai;

   
 
   
   
   ==============================================
   
   
   server {
    listen 80;
    server_name harshini.kreatio.info;
    return 301 https://$host$request_uri;



   location / {
         proxy_set_header Host $http_host;
         proxy_redirect off;
         proxy_pass http://gocd:8153;
    }
  }
   
   

======domain====

https://www.serverlab.ca/tutorials/linux/web-servers-linux/how-to-configure-multiple-domains-with-nginx-on-ubuntu/
=====================================

server {
  listen 80;
  listen 8000;  # from you config, remove if unnecessary

  server_name 34.245.202.112;

  proxy_set_header Host $http_host;
  proxy_set_header X-Forwarded-Host $host;

  location / {
    # 'the frontend(nuxt) at 34.245.202.112'
    # This is the default route. Requests get here when there's no
    # better match to go.
    proxy_pass http://nuxt:3000;
  }

  location /api/ {
    # This location will trigger when location in URI begins with '/api/'
    # e.g. http://yourserver.org/api/v1/hello/world
    proxy_pass http://django:8001;
  }

  location /admin/ {
    # exactly as /api/
    proxy_pass http://django:8001;
  }

  location /static/ {
    # same as /api/ but local files instead of proxy
    alias /static/;
  }
}===========


wget https://dl.google.com/linux/direct/go... server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    # return 301 https://$host$request_uri;

    #access_log  /var/log/nginx/host.access.log  main;

   # location / {
    #    root   /usr/share/nginx/html;
   #     index  index.html index.htm;
  #   }
 
     location / {
      #    proxy_set_header Host $http_host;
         proxy_pass http://192.168.15.121:4200;
   }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    #error_page   500 502 503 504  /50x.html;
    #location = /50x.html {
     #   root   /usr/share/nginx/html;
    #}

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
  #  } 
}


sudo apt install ./google-chrome-stable_current_amd64.deb
 ===========================
 
 127.0.0.1    localhost
127.0.1.1    00402

 

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
=================================================================
  
  CONFIG FILE
  
 server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    # return 301 https://$host$request_uri;

    #access_log  /var/log/nginx/host.access.log  main;

   # location / {
    #    root   /usr/share/nginx/html;
   #     index  index.html index.htm;
  #   }
 
     location / {
      #    proxy_set_header Host $http_host;
         proxy_pass http://192.168.15.121:4200;
   }

    #error_page  404              
}
=============================================================================

proxy_set_header:-

===============

To adjust or set headers for proxied connections, use the proxy_set_header directive, followed by the header value. You can find a list of all available Request Headers and their allowed values here . If you want to prevent a header from being passed to the proxied server, set it to an empty string "

 

proxy_pass:-

==========

The proxy_pass setting makes the Nginx reverse proxy setup work. The proxy_pass is configured in the location section of any virtual host configuration file. To set up an Nginx proxy_pass globally, edit the default file in Nginx's sites-available folder

 =========================================
    
 docker run -itd --name nginx -p 80:80 -p 443:443 -v /data/kreatio-nginx/conf:/usr/local/openresty/nginx/conf -v /data/kreatio-nginx/cache:/usr/local/openresty/nginx/cache -v /data/kreatio-nginx/nginx_logs/nginx:/usr/local/openresty/nginx/tmp/logs -v /data/kreatio-nginx/tmp:/usr/local/openresty/nginx/tmp quay.io/kreatio/nginx:1.19.9.1


 docker run -itd --name nginx -p 80:80 -v /data/kreatio-nginx/conf:/usr/local/openresty/nginx/conf -v /data/kreatio-nginx/cache:/usr/local/openresty/nginx/cache -v /data/kreatio-nginx/nginx_logs/nginx:/usr/local/openresty/nginx/tmp/logs -v /data/kreatio-nginx/tmp:/usr/local/openresty/nginx/tmp quay.io/kreatio/nginx:1.19.9.1

   =======================
   https://www.youtube.com/watch?v=lCq4mYQL0WY
   =========================	
   
   The proxy_pass setting makes the Nginx reverse proxy setup work. The proxy_pass is configured in the location section of any virtual host configuration file. To set up an Nginx proxy_pass globally, edit the default file in Nginx's sites-available folder.
   
   ------------------------
     
    ANSible install link
   https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-ansible-on-ubuntu-20-04
   
   =====
   ssh-copy-id -i
   
   =====================================================
          Ansible installitation and playbook
   ----------------------------------
   sudo apt-get update
   sudo apt-get install software-properties-common
   sudo apt-add-repository ppa:ansible/ansible
   sudo apt-get update
   sudo apt-get install ansible
   ----------------------------------
   /home/vinuvinay/.ssh/id_rsa.pub
-----------------------
 
 
 
 
 
 
 Ansible playbook nginx instalation
 
 https://www.techbeginner.in/2021/01/how-to-install-nginx-using-ansible-playbook-on-ubuntu.html
 
 
 
 
 
 ---
- hosts: localhost
  tasks:
- name: Create public IP address
    azure_rm_publicipaddress:
    resource_group: rg-cs-ansible
    allocation_method: Static
    name: pip-cs-web
    register: output_ip_address

- name: Output public IP
    debug:
    msg: "The public IP is {{ output_ip_address.state.ip_address }}"
  ====================================================================
 Ansible installation
 
  https://code-maven.com/install-and-configure-nginx-using-ansible
 
 
 ==========================================================================================
 
 prerequisities 
 
--- 
 - name: Install git
  apt:
    name: git
    state: present
    update_cache: yes
   
   
   =========================================================
   
    Mongodb 
    
---
- name: MongoDB - Import public key
  apt_key:
    keyserver: hkp://keyserver.ubuntu.com:80
    id: EA312927
- name: MongoDB - Add repository
  apt_repository:
    filename: '/etc/apt/sources.list.d/mongodb-org-3.2.list'
    repo: 'deb <a href="http://repo.mongodb.org/apt/ubuntu">http://repo.mongodb.org/apt/ubuntu</a> xenial/mongodb-org/3.2 multiverse'
    state: present
    update_cache: yes
- name: MongoDB - Install MongoDB
  apt:
    name: mongodb-org
    state: present
    update_cache: yes
- name: MongoDB - Running state
  service:
    name: mongod
    state: started
   
 
===================================================================
 Nodejs 
 
 
 - name: Node.js - Get script
  get_url:
    url: "http://deb.nodesource.com/setup_6.x"
    dest: "{{ var_node }}/nodejs.sh"

- name: Node.js - Set execution permission to script
  file:
    path: "{{ var_node }}/nodejs.sh"
    mode: "u+x"

- name: Node.js - Execute installation script
  shell: "{{ var_node }}/nodejs.sh"

- name: Node.js - Remove installation script
  file:
    path: "{{ var_node}}/nodejs.sh"
    state: absent

- name: Node.js - Install Node.js
  apt: name={{ item }} state=present update_cache=yes
  with_items:
    - build-essential
    - nodejs

- name: Node.js - Install bower and gulp globally
  npm: name={{ item }} state=present global=yes
  with_items:
    - bower
    - gulp
    
=====  = ========================================== 
   Meanstack.yml
   
--- 
 - hosts: all
   become: true
   vars: 
     var_node: /tmp
   roles:
       - prerequisities
       
       ==============================
       slave machine 
       
       sudo apt-key list | grep "expired:"
       sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xd68fa50fea312927 ============================================================================================================
 
     creating nginx container using Ansible playbook
     
 
  - name: stop nginx
    become: true
    command: docker stop nginx1
    ignore_errors: yes
  - name: remove nginx
    become: true
    command: docker rm -f nginx1
    ignore_errors: yes
  - name: restart nginx1
    become: true
    command: docker run --name nginx --network kreatio_network -v /data/kreatio-nginx/public:/usr/local/openresty/nginx/public -v /data/kreatio-nginx/nginx_logs/nginx:/usr/local/openresty/nginx/tmp/logs -v /data/kreatio-nginx/cache:/usr/local/openresty/nginx/cache -p 80:80 -d quay.io/kreatio/nginx:1.9.15
    
 
 
 ===============================================================================================	
  creating blu-aie container using Ansible playbook
 
 ---
 - name: create directory
   hosts: localhost
   tasks:
   - name: blu-aie
     become: true
     command: docker run --name blu-aie -p 4200:4200 -d quay.io/kreatio/app:blu_aie_ui_22

 ================================================================================================
  creating elasticsearch container using Ansible playbook
  
  company image = docker.elastic.co/elasticsearch/elasticsearch:6.1.0
  
  ---
- name: create directory
  hosts: localhost
  tasks:
    - name: elastic-search
      become: true
      command: docker run -d --network=elastic --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:7.6.2
========================================================================================================

   how to install virtual box 
   
   chrome search virtualbox
   download 
   cd Downloads
   sudo dpkg -i virtualbox-7.0_7.0.4-154605_Ubuntu_focal_amd64.deb
   sudo apt -f install
    
    sudo apt remove virtualbox
    sudo apt autoremove
   ======================================================================================= 
   
 authorized_keys
 
 chown -R vinay:vinay sudoers
 chmod 0440 /etc/sudoers
 
 
 
 ==========================================================
 how to deploy local machine to virtual machine
 
 Answer: create a directory inside create hosts & roles
 inside hosts create file 

 [virtual_a]
 vinay ansible_host=192.168.21.21 ansible_user=vinay
 
 in roles 
 ---
- name: postgres-sql
   # become: true
  command: docker run --name postgresql -e POSTGRES_USER=vinuvinay -e POSTGRES_PASSWORD=vinay -p 5432:5432 -v /data:/var/lib/postgresql/data6 -itd postgres:latest

after that create ansible playbook  .yml file
---
- name: vinay1
  hosts: virtual_a
  roles:
    - virtual1


after run the below command

ansible-playbook -i hosts/virtual1/ virtual.yml 
    or
ansible-playbook -i inventory  virtual.yml 

======================================================================================
whats in it for you ?
 1. water fall model 
 2. agile model 
 3. what is devops ?
 4. Devops phares 
 5. Devops Tools 
 6.Devops Advantages 
 
 
 =============================================================================
 
     gocd 
 only one instance of gocd pipeline can run at the same time
 there are three types of instances 
 1. run single instance of pipeline at a time
 2. run single instance of pipeline and lock on failure
 3. run multiple instances
  
  Managing dependencies
  
  sometimes you need more complex triggers than a simple pipeline of stages and jobs. in particular, you may want a pipeline to trigger based on the result of stage in another pipeline. This is possible by adding pipelines as materials===================================================================================
ansible playbook & gocd 

 main.yml playbook

- name: gocd
  hosts: virtual_a
  roles:
  - demo
    
    ----------------------------------
    host 
    
    [virtual_a]
vinay ansible_host=192.168.21.21 ansible_user=vinay
vboxuser ansible_host=192.168.20.20 ansible_user=vboxuser

--------------------------------
    roles

---
- name: postgres-sql
   # become: true
  command: docker run --name postgresql -e POSTGRES_USER=vinuvinay -e POSTGRES_PASSWORD=vinay -p 5432:5432 -v /data:/var/lib/postgresql/data6 -itd postgres:latest

------------------------------------------------------------------------------
  
  ========================================================
  gocd learning link
  
  https://www.lambdatest.com/blog/building-an-automated-testing-pipeline-with-gocd/
  ========================================================
       
       creating docker agent
       
  sudo docker run -itd --hostname agent --dns=192.168.2.1 --name agent-v /var/run/docker.sock:/var/run/docker.sock -e GO_SERVER_URL=http://192.168.15.121:8153/go gocd/gocd-agent-ubuntu-20.04:v22.3.0

  =========================================================================
  ===================================================================================
      ansible playbook & gocd 

 main.yml playbook

- name: gocd
  hosts: virtual_a
  roles:
  - demo
    
    ----------------------------------
    host 
    
    [virtual_a]
vinay ansible_host=192.168.21.21 ansible_user=vinay
vboxuser ansible_host=192.168.20.20 ansible_user=vboxuser

--------------------------------
    roles

---
- name: postgres-sql
   # become: true
  command: docker run --name postgresql -e POSTGRES_USER=vinuvinay -e POSTGRES_PASSWORD=vinay -p 5432:5432 -v /data:/var/lib/postgresql/data6 -itd postgres:latest

------------------------------------------------------------------------------
     how to connect local machine to virtual machine  
     
 
https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-18-04

-----------------------------------------------------------------------------------

vinay@109:/home/ruby/DB_backup$ cd 
vinay@109:~$ docker exec -it db1 bash
root@8840feb00a65:/# cd /home/DB_backup/
root@8840feb00a65:/home/DB_backup# su postgres
$ psql 
Password for user postgres: 
psql (12.7 (Ubuntu 12.7-1.pgdg20.04+1))
Type "help" for help.

postgres=# \l
                                         List of databases
        Name        |     Owner      | Encoding |   Collate   |    Ctype    |   Access privileges   
--------------------+----------------+----------+-------------+-------------+-----------------------
 demo               | postgres       | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
 incisive-cms-stage | incisive-stage | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
 postgres           | postgres       | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
 template0          | postgres       | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
                    |                |          |             |             | postgres=CTc/postgres
 template1          | postgres       | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
                    |                |          |             |             | postgres=CTc/postgres
(5 rows)

postgres=# exit
could not save history to file "/home/postgres/.psql_history": No such file or directory
$ 
root@8840feb00a65:/home/DB_backup# LS
bash: LS: command not found
root@8840feb00a65:/home/DB_backup# ls -lrth
total 1.9G
-rw-r--r-- 1 root root    0 Feb  2 07:11 db_backup_19.sql
-rw-r--r-- 1 root root 1.9G Feb  2 13:20 incisive-cms-stage-dec-19.sql
root@8840feb00a65:/home/DB_backup# pwd
/home/DB_backup
root@8840feb00a65:/home/DB_backup# pg_restore -h localhost -p 5432 -U incisive-stage -d incisive-cms-stage -v incisive-cms-stage-dec-19.sql
pg_restore: connecting to database for restore
Password: 
pg_restore: error: connection to database "incisive-cms-stage" failed: FATAL:  password authentication failed for user "incisive-stage"
root@8840feb00a65:/home/DB_backup# pg_restore -h localhost -p 5432 -U incisive-stage -d incisive-cms-stage -v incisive-cms-stage-dec-19.sql
pg_restore: connecting to database for restore
Password: 
pg_restore: creating EXTENSION "pg_stat_statements"
pg_restore: creating COMMENT "EXTENSION pg_stat_statements"
pg_restore: creating EXTENSION "uuid-ossp"
pg_restore: creating COMMENT "EXTENSION "uuid-ossp""
pg_restore: creating TABLE "public.accessed_articles"
pg_restore: creating TABLE "public.activity_statuses"
pg_restore: creating TABLE "public.activity_summaries"
pg_restore: creating TABLE "public.activity_types"
pg_restore: creating TABLE "public.admin_users"
pg_restore: creating TABLE "public.admins"
pg_restore: creating TABLE "public.ads"
pg_restore: creating TABLE "public.agencies"
pg_restore: creating TABLE "public.all_redirects"
pg_restore: creating TABLE "public.answers"
pg_restore: creating TABLE "public.ar_internal_metadata"
pg_restore: creating TABLE "public.article_authors"
pg_restore: creating TABLE "public.article_category_sites"

================================================================================================================================================================================

                                   AWS LEARNING
                                   
                                   
   * AWs is cloud platform (Amazon web service).
   * S3 (simple secured storage)
   * EC2 (here we can use ubuntu or linux machine) (Elastic computing cloud)
   
   There are two kinds of modules in cloud computing 
   1.Deployment models
   2.Service modues
   
   
   ! Deployment models
   
     . public cloud
     . private cloud 
     . Hybride cloud
     
     
   2 Service modues
     .Infrastruture as a service
     .Platform as a service
     .Software as a service
 
 
 ===========================================GIT========================================================= 
 
  youtube link : https://www.youtube.com/watch?v=vMdSqMf6BPY&list=PL_euSNU_eLbegnt7aR8I1gXfLhKZbxnYX
  
  ------------------------------------------------------------------------------------------------
  what is git ?
   
   It is a distributed version control system (vcs). devolped by LINUS Torvalds this guy devolped the linux.
   
   * Basically vcs is the software designed to record changes made to the file overtime.
   * Git gives us ability to revert the files or the set of files you made changes.
   * Git not only records the souce code it also tracks the images, research papers or any types of files.
   * we have three kinds of version control system
      1.local version control system .
      2. centrilized version control system.
      3. Distributed version control system.
      
      
     Local version control system 
     
     * many people use this method .
     * this method is to copy files into another directory .
     * they keep the files with the timestamp directory ( means save the file with date and time example: vinay_19/10/2022.txt)  
     * it is very simple that we maintain the backup.
     
     Centralized version control system 
     
     * In order to collabrate with the other developer this method is devolped .
     * This systems have a single server that have all versioned files and number of clintes can take the file from that central place.
     * For many years this is the standard for version control.
     * Cvs, Subversion and perforce are the examples of this method.
     
     Advantages of centralized vcs
     
     * this has advantages over local vcs.
     * everyone can know what is going on the project .
     * Administrators can have control that who can do what.
     * everyone can get the project update immediately as all are linked to the one centralized sever.
     
     Disadvantages of cetnralized vcs
     
     * if the centralized server goes down for an hour , nobody can collaborate al all or save the canges to the centralized server.
     * if the hard disk of  central database corrupted and proper backups have not been kept , you lose absulutely everything.
     * local vcs suffer from this same problem , when ever you hav ethe entire history of the project in a single place , you risk losing everything.
     
     
    Distributed version control system.
    
    * Clintes not only checkout the snapshots of files, they can also fully mirror the repository including its full history.
    * In clients system also you can maintain the versions so that when the server is up you can fully copied back to the server.
    * Every clone is a full backup of all the data.
    
   ------------------------------------------------------------------------------------------------------------------------------------------------- 
    
    How git works
         
  
 * Compared to other vcs like subversion. Most operations in git requries local files and local resources to operate.
  * if you are used to a centralized vcs where most operations have that network latency overhead,
  
  * For example , to browse the history of the project , git doesnt need to go out the server to get the history and display it for you.
  * it simply reads it directly from your loacl datbase .
  if you want to see the changes between the current working file and the file a month ago.
  *git can look up the file a month ago and do a local differnce calculation.
  
  * There is no need to ask remote server to do it or pull an older version of the file from the remote sever to do it locally.
  * This means you can do your work happiely until yoy get to a network connection to upload.
  * In subversion and C vcs , you can edit files , but you can't commit changes to your database ( because your database is offline).
  
  
  THREE STATES IN GIT
  
   git has three main stages that your working in file they are : modified , staged and commited.
   
   * modified means that you have changes the file but have not commited it to your database yet.
   * Staged means that you have marked a modified file in its ciurrent version to go into your next commit snapshot.
   * Commited means that the data is safely stored in your database.
   
   WORKING DIRECTORY
   
   *The working tree is a single checkout of one version of the project.
   *These files are pulled out of the compressed datbase in the git directory and placed on disk for you to use or modify.
   
   
   STAGING AREA
   
   *The staging area is a file, generally contained in your git directory, that stores information about what will go into your next commit . its technical name in git is " index" , but the phrase " staging area" works ust as well.
   
   REPOSITORY AREA
   
   * The git directory is where git stores the metadata and object database for your project. this is the most important part of git , and it is what is copied when you clone a repositary from anothet computer.
   
   
   GIT WORKFLOW
   
   the basic git workflow goes somthing like this:
   
   1. you modify files in your working tree.
   2.you selectively stage just those changes you want to be part your next commit , which adds only changes to the stagging area.
   3. you do a commit , which takes the files as they are in the stagging area and stores that snapshots permanently to your git directory.
  
 ----------------------------------------------------------------------------------------------------------------------------------------------- 
  
  INSTALLING GIT 
  
  before start using git we need to install git in your computer.
  
  if it already presnt its better to upgrade git to the latest version.
  
  There are lot of different ways to use git.
  
  * Using command line tools.
  * Using Graphical user interfaces.(here wil have some software which will automatically write code like sourcegit, tortise git etc..)
  
  --------------------------------------------------------------------------
  
       GIT COnfigaration
       
    * After installing git in our system.
    * The first thing we need to do is set our username and the email address.
    *This is because when we use git to change the files in the project . git uses this information to identify who has made the changes to the file.
    * the command to add the user name and address is 
     git config
     
     
    Git uses a series of configuration files to determine the behaviour.
    
      Git has multiple levels of configuration
      
      1.Repository/Project level (local).
      2.User Account (Global level).
      3.System level (git installation).
      
      
    GIT CONFIG LOCATIONS
    
     Local(Repository/Project level)
     repository/.git/config
     
     
    Global(User level);
    Users/vinay/.gitconfig
    
    
    System(git installation)
    /usr/local/etc/gitconfig
    
    
    *Check Complete Git Config
    git config --list --show-origin

    *Remove a specific setting for specific level of config
    git config --global --unset user.name
    
    *remove the specific section
    git config --global --remove-section user.
    
    git help 
    git help -a
    git help init
    git help add 
 --------------------------------------------------------------------------------------------------------  
 
 
    git init  (will create one repository .git)
    git add . (it will add the file )
    git status (to check the status)
    git commit -m(message) "initial commit"
    git log ( to check home many commits you made)
      
    
  ------------------------------------------------------------------------------------------------------------
  
  GIT Diff command
  
  *Diff command is used in git to track the difference between the changes made on a file.
  *diff command takes two inputs and reflects the difference between them.
  
  
  we know that git has three areas Working area, staging area , repository area.
  
  *To check the changes in the working area and the staged area 
     
     git diff 
     
    * to check the changes between the stage area and the repository area 
     
     git diff --staged
     
    * to check the changes between the working and repository
    
      git diff head 
      
      
    ------------------------------------------------------------------------------   
  
     * git mv vinay.html vinay.txt (move command is used to change the name or move the file)
     * git restore --staged vinay.txt ( to revert the changes use restore command )
    
  
  -----------------------------------------------------------------------
   
   Git Branching
   
   git checkout -b (branch-name )     (to create new branch)
   
   git checkout master (changing branch)
   
   git branch -m new-master (to rename the branch)
   
   git branch -d new-branch (to delete branch )
   
    git log --oneline (to check commit status )
    
    (master branch ) git merge vinay-branch
    
  ---------------------------------------------------------------------------------------------------------
  
  GIY REBASE
  
  
  
  
  
  
    
 (1) GIT reflog 
    
   * the term reflog is a short form for reference logs.
   * these are just logs that keeps us for as a record.
   * git keeps a record of when the tips of branches and other references were updated in the repository.
   * we can view and update these reflog using the git reflog command.
    
    Limitations
    * git only keeps reflogs on your local machines.
    * they are not shared with the hosted repositary.
    * Reflog also expire . git cleanes out old entires after 90 days. though ths can be configured.
    
    commmands
    *the git reflog command accepts sub-commands like Show,expire, delete and exists.
    * show is the only command used variant , and it is the default subcommand.
    * git reflog show command will show the log of the specific reference (it defaults to HEAD).
    * For example , to view the logs for the tip of the main branch we could run 
    
    git reflog show main.
    
    git reflog show head.  git reflog show (branch name )
    
  ------------------------------------------------------------------- ----------------------------------------
   (2) Git Cherry-pick
   
   * cherry pick is used if you want to apply particular commit from one branch into another branch.
   * cherry pick is mainly used if you dont want to merge the whole branch and you wants some commits
   * cherry pick just like rebase it is advanced concept and also powerful command.
   * cherry-pick is a useful tool but always its not a good optio.
   *it can cause duplicate commits.
   * mainly cherry pick is used for the bug fixes where you want to palce that bugfix commit in all the version branch 
   * it is also used when an accidentally made commit in the wrong branch.
   
   git log --oneline
   git cherry-pick (6a6628c -hash)   
   
  ----------------------------------------------------------------------------------------------------------
  
                              
